#!/usr/bin/env python3

import os, sys, subprocess

# disable cache usage must be before any local imports
sys.dont_write_bytecode = True

from functools import partial

from PyQt6.QtWidgets import QApplication, QMainWindow
from PyQt6.uic import loadUi
from PyQt6.QtCore import Qt, QTimer, QEvent

import linuxcnc

from libflexgui import startup
from libflexgui import status
from libflexgui import connections
from libflexgui import commands

class flexgui(QMainWindow):
	def __init__(self):
		super().__init__()

		# check to see if linuxcnc is running
		cp = subprocess.run(['pgrep', '-l', 'linuxcnc'], text=True, capture_output=True)
		if 'linuxcnc' not in cp.stdout:
			print('emc not running')
			sys.exit()

		# get the path to the executable
		self.path = os.path.dirname(os.path.realpath(sys.argv[0]))

		# set the library path
		if self.path == '/usr/bin':
			self.lib_path = '/usr/lib/libflexgui'
			self.gui_path = '/usr/lib/libflexgui'
		else:
			self.lib_path = os.path.join(self.path, 'libflexgui')
			self.gui_path = self.path

		# connect to linuxcnc
		self.status = linuxcnc.stat()
		self.status.poll()
		self.command = linuxcnc.command()
		self.error = linuxcnc.error_channel()

		# get connection to the ini file
		self.inifile = False
		for i in range(len(sys.argv)): # check if running from ini DISPLAY entry
			if sys.argv[i].endswith('.ini'):
				self.inifile = linuxcnc.ini(sys.argv[i])
				break
		if not self.inifile: # otherwise it's running with axis for testing
			self.inifile = linuxcnc.ini(self.status.ini_filename)

		# get ini values if any
		gui_file = self.inifile.find('DISPLAY', 'GUI') or False
		input_type = self.inifile.find('DISPLAY', 'INPUT') or False
		qss_file = self.inifile.find('DISPLAY', 'QSS') or False
		screen_size = self.inifile.find('DISPLAY', 'SIZE') or False
		print(f'gui_file {gui_file}')
		print(f'input_type {input_type}')
		print(f'qss_file {qss_file}')
		print(f'screen_size {screen_size}')

		# find and load the gui
		if gui_file: # gui is in the ini file
			gui_path = os.path.join(os.path.dirname(self.status.ini_filename), gui_file)
			if not os.path.isfile(gui_path): # gui not found
				gui_path = os.path.join(self.gui_path, 'flex.ui')
		else: # no gui specified
			gui_path = os.path.join(self.gui_path, 'flex.ui')

		loadUi(gui_path, self)

		# find and load the stylesheet
		stylesheet = False
		if input_type:
			if input_type.lower() == 'touch':
				stylesheet = os.path.join(self.lib_path, 'touch.qss')
			elif input_type.lower() == 'keyboard':
				stylesheet = os.path.join(self.lib_path, 'keyboard.qss')

		if qss_file: # load local qss file make sure it exists !!!!!
			if os.path.isfile(os.path.join(self.ini_path, qss_file)):
				stylesheet = os.path.join(self.ini_path, qss_file)

		if stylesheet:
			with open(stylesheet,'r') as fh:
				self.setStyleSheet(fh.read())

		# set the inital screen size
		if screen_size:
			if screen_size.lower() == 'minimized':
				self.showMinimized()
			if screen_size.lower() == 'normal':
				self.showNormal()
			if screen_size.lower() == 'maximized':
				self.showMaximized()
			elif screen_size.lower() == 'full':
				self.showFullScreen()
		else:
			self.show()

		startup.setup_status_labels(self)
		startup.setup_hal_buttons(self)
		startup.load_postgui(self)

		# setup and start the status update timer every 0.1 second
		self.timer = QTimer()
		self.timer.timeout.connect(partial(status.update, self))
		self.timer.start(10) # milliseconds



app = QApplication(sys.argv)
gui = flexgui()
sys.exit(app.exec())
